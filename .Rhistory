#ppt <- ph_with(ppt, value = formatted_text,
# location = ph_location(left = 12.8, top = 9, width = 5, height = 1))
# Get the current month and year dynamically
#formatted_date <- format(Sys.Date(), "%B %Y")
# Select the second slide
ppt <- on_slide(ppt, index = 2)
# Add the new dynamic date in "TextBox 6" with the dynamic date (formatted_date)
ppt <- ph_with(ppt, value = formatted_date,
location = ph_location(left = 4.4471861, top = 3.253519, width = 3.662061461, height = 0.4251717))
# Save the modified presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now move to the second slide
ppt <- on_slide(ppt, index = 2)
# Check slide summary (optional)
# slide_summary(ppt)
# Define multi-line formatted text with font size adjustments
formatted_text <- fpar(
ftext("• 85% of people report improved mood after regular exercise, follow their example and take care of yourself.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n• 70% of individuals aged 30-50 engage in physical activity at least 3 times per week.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n• Regular physical activity can help reduce stress and anxiety, leading to a more balanced life.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n• Studies show that people who exercise regularly sleep better and have higher energy levels.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted multi-line text to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_text,
location = ph_location(left = 10, top = 4, width = 9.5, height = 15))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select the second slide
ppt <- on_slide(ppt, index = 2)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Health Benefits of Physical Activity",
prop = fp_text(font.size = 32, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted title to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 4.5, top = 2, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select the second slide
ppt <- on_slide(ppt, index = 5)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Look at this picture of Hommood fixing the Ipad",
prop = fp_text(font.size = 32, bold = FALSE, color = "black", font.family = "Garnett 2"))
)
# Add the formatted title to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 13, top = 6.3, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select the second slide
ppt <- on_slide(ppt, index = 5)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("100 IPADS",
prop = fp_text(font.size = 41.7, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n 100 COMPUTERS",
prop = fp_text(font.size = 41.7, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted title to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 13, top = 8, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
### Next level
#install.packages("pdftools")
#install.packages("magick")
library(pdftools)
library(magick)
#Converting the pdf to png
# Path to your PDF file
pdf_file <- "thisPlot.pdf"
# Convert PDF to PNG
pdf_convert(pdf_file, format = "png", dpi = 300)  # This should give "thisPlot_1.png"
# Make the background of the PNG transparent (if needed)
png_image <- image_read("thisPlot_1.png")
transparent_image <- image_transparent(png_image, "white")
# Save the image with transparency
image_write(transparent_image, path = "thisPlot_transparent.png", format = "png")
#Now saving the image in the ppt
slide_summary(ppt)
# Go to slide 6
ppt <- on_slide(ppt, index = 6)
# Path to the PNG image
png_image <- "thisPlot_transparent.png"
# Add the PNG image to slide 6
ppt <- ph_with(ppt, external_img(png_image, width = 10, height = 13),
location = ph_location(left = 10, top = 4, width = 9, height = 6))
# Save the updated PowerPoint presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Go to slide 6
ppt <- on_slide(ppt, index = 6)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Histogram of Ages",
prop = fp_text(font.size = 30, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted title to slide 6 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 10, top = 2, width = 6, height = 1))
# Now save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select slide 7
ppt <- on_slide(ppt, index = 7)
# Define paragraph properties with custom line spacing (e.g., 1.5)
line_spacing_prop <- fp_par(line_spacing = 1.58)
# Define the title using fpar() and ftext() for consistent formatting and spacing
formatted_title <- fpar(
ftext("100 IPADS",
prop = fp_text(font.size = 35, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
fp_p = line_spacing_prop  # Apply line spacing to the whole paragraph
)
# Add the formatted title to slide 7 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 13, top = 3.5, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
library(officer)
library(flextable)
# Load the existing PowerPoint
print(ppt, target = "updated_presentation_with_date.pptx")
# Navigate to slide 9
pptx <- on_slide(pptx, index = 9)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Random Data for a Table",
prop = fp_text(font.size = 30, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the title to the slide
pptx <- ph_with(
pptx,
value = formatted_title,
location = ph_location(left = 1, top = 1, width = 8, height = 1) # Position title above the table
)
# Creating a sample table with rows of random data
set.seed(123)  # For reproducibility
my_data <- data.frame(
Column1 = paste("Row", 1:10),
Column2 = sample(50:100, 10),  # Random data
Column3 = sample(100:150, 10), # Random data
Column4 = sample(200:300, 10),  # Random data
Column5 = sample(600:300, 10),  # Random data
Column6 = sample(500:300, 10),  # Random data
Column7 = sample(900:300, 10),  # Random data
Column8 = sample(300:300, 10)  # Random data
)
# Create a flextable object with custom styles
flextable_obj <- flextable(my_data) %>%
# Adjust table size and font size
fontsize(size = 14, part = "all") %>%
# Add header background color
bg(part = "header", bg = "#4F81BD") %>%
# Add text color to header
color(part = "header", color = "white") %>%
# Center align text in all cells
align(align = "center", part = "all") %>%
# Add borders
border_inner(border = fp_border(color = "black", width = 2)) %>%
border_outer(border = fp_border(color = "black", width = 2)) %>%
# Adjust column widths for a larger table
set_table_properties(width = .8, layout = "autofit")
# Add the table to the slide
pptx <- ph_with(
pptx,
value = flextable_obj,
location = ph_location(left = 1, top = 2, width = 9, height = 3) # Adjusted for a larger table
)
# Save the updated PowerPoint
print(pptx, target = "updated_presentation_with_date.pptx")
#Creating a chart
# Install and load the required packages
#install.packages("rvg")
library(rvg)
library(officer)
# Load your existing PowerPoint presentation
pptx <- read_pptx("updated_presentation_with_date.pptx")
# Go to slide 11
pptx <- on_slide(pptx, index = 11)
# Add a title to the slide
pptx <- ph_with(pptx, "Column Chart Example",
location = ph_location(left = 1, top = 2, width = 9, height = 3))
# Insert the column chart using ph_with_vg()
pptx <- ph_with_vg(
pptx,
code = {
# Example dataset (mtcars dataset)
barplot(
table(mtcars$cyl),  # Create a bar chart of the 'cyl' column (cylinder count)
main = "Count of Cars by Cylinder",
xlab = "Number of Cylinders",
ylab = "Frequency",
# Save the updated PowerPoint
print(pptx, target = "updated_presentation_with_date.pptx")
#install.packages("officer")
#install.packages ("ggplot2")
#install.packages ("dplyr")
#install.packages ("lubridate")
library(officer)
#install.packages("officer")
#install.packages ("ggplot2")
#install.packages ("dplyr")
#install.packages ("lubridate")
library(officer)
library(ggplot2)
library(dplyr)
library(lubridate)
ppt <- read_pptx("C:\\Users\\DataIntern\\HQToronto\\Shared Docs - General\\Clinical Reporting\\ReportingProjects\\DataIntern\\ImportDataProject\\FINALOUTPUT.pptx")
# Select the first slide
ppt <- on_slide(ppt, index = 1)
# Formatting the date to today's date
formatted_date <- format(Sys.Date(), "%B %Y")
# Define text formatting for the date
date_style <- fp_text(font.size = 35, font.family = "Garnett 2", bold = FALSE, color = "black")
# Create a formatted text object using fpar() and ftext()
formatted_text <- fpar(
ftext(formatted_date, prop = date_style)
)
# Add the formatted date text to slide 1 at a specific location
ppt <- ph_with(ppt, value = formatted_date,
location = ph_location(left = 12.8, top = 9, width = 5, height = 1))
# Save the presentation after adding the date to slide 1
print(ppt, target = "updated_presentation_with_date.pptx")
#ppt <- ph_with(ppt, value = formatted_text,
# location = ph_location(left = 12.8, top = 9, width = 5, height = 1))
# Get the current month and year dynamically
#formatted_date <- format(Sys.Date(), "%B %Y")
# Select the second slide
ppt <- on_slide(ppt, index = 2)
# Add the new dynamic date in "TextBox 6" with the dynamic date (formatted_date)
ppt <- ph_with(ppt, value = formatted_date,
location = ph_location(left = 4.4471861, top = 3.253519, width = 3.662061461, height = 0.4251717))
# Save the modified presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now move to the second slide
ppt <- on_slide(ppt, index = 2)
# Check slide summary (optional)
# slide_summary(ppt)
# Define multi-line formatted text with font size adjustments
formatted_text <- fpar(
ftext("• 85% of people report improved mood after regular exercise, follow their example and take care of yourself.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n• 70% of individuals aged 30-50 engage in physical activity at least 3 times per week.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n• Regular physical activity can help reduce stress and anxiety, leading to a more balanced life.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n• Studies show that people who exercise regularly sleep better and have higher energy levels.",
prop = fp_text(font.size = 28, bold = FALSE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted multi-line text to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_text,
location = ph_location(left = 10, top = 4, width = 9.5, height = 15))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select the second slide
ppt <- on_slide(ppt, index = 2)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Health Benefits of Physical Activity",
prop = fp_text(font.size = 32, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted title to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 4.5, top = 2, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select the second slide
ppt <- on_slide(ppt, index = 5)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Look at this picture of Hommood fixing the Ipad",
prop = fp_text(font.size = 32, bold = FALSE, color = "black", font.family = "Garnett 2"))
)
# Add the formatted title to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 13, top = 6.3, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select the second slide
ppt <- on_slide(ppt, index = 5)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("100 IPADS",
prop = fp_text(font.size = 41.7, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n 100 COMPUTERS",
prop = fp_text(font.size = 41.7, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted title to slide 2 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 13, top = 8, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
### Next level
#install.packages("pdftools")
#install.packages("magick")
library(pdftools)
library(magick)
#Converting the pdf to png
# Path to your PDF file
pdf_file <- "thisPlot.pdf"
# Convert PDF to PNG
pdf_convert(pdf_file, format = "png", dpi = 300)  # This should give "thisPlot_1.png"
# Make the background of the PNG transparent (if needed)
png_image <- image_read("thisPlot_1.png")
transparent_image <- image_transparent(png_image, "white")
# Save the image with transparency
image_write(transparent_image, path = "thisPlot_transparent.png", format = "png")
#Now saving the image in the ppt
slide_summary(ppt)
# Go to slide 6
ppt <- on_slide(ppt, index = 6)
# Path to the PNG image
png_image <- "thisPlot_transparent.png"
# Add the PNG image to slide 6
ppt <- ph_with(ppt, external_img(png_image, width = 10, height = 13),
location = ph_location(left = 10, top = 4, width = 9, height = 6))
# Save the updated PowerPoint presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Go to slide 6
ppt <- on_slide(ppt, index = 6)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Histogram of Ages",
prop = fp_text(font.size = 30, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the formatted title to slide 6 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 10, top = 2, width = 6, height = 1))
# Now save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
# Now select slide 7
ppt <- on_slide(ppt, index = 7)
# Define paragraph properties with custom line spacing (e.g., 1.5)
line_spacing_prop <- fp_par(line_spacing = 1.58)
# Define the title using fpar() and ftext() for consistent formatting and spacing
formatted_title <- fpar(
ftext("100 IPADS",
prop = fp_text(font.size = 35, bold = FALSE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
ftext("\n100 COMPUTERS",
prop = fp_text(font.size = 35, bold = TRUE, color = "black", font.family = "Garnett 1")),
fp_p = line_spacing_prop  # Apply line spacing to the whole paragraph
)
# Add the formatted title to slide 7 at the specified location
ppt <- ph_with(ppt, value = formatted_title,
location = ph_location(left = 13, top = 3.5, width = 6, height = 1))
# Save the final version of the presentation
print(ppt, target = "updated_presentation_with_date.pptx")
library(officer)
library(flextable)
# Load the existing PowerPoint
print(ppt, target = "updated_presentation_with_date.pptx")
# Navigate to slide 9
pptx <- on_slide(pptx, index = 9)
# Define the title using fpar() and ftext() for consistent formatting
formatted_title <- fpar(
ftext("Random Data for a Table",
prop = fp_text(font.size = 30, bold = TRUE, color = "black", font.family = "Garnett 1"))
)
# Add the title to the slide
pptx <- ph_with(
pptx,
value = formatted_title,
location = ph_location(left = 1, top = 1, width = 8, height = 1) # Position title above the table
)
# Creating a sample table with rows of random data
set.seed(123)  # For reproducibility
my_data <- data.frame(
Column1 = paste("Row", 1:10),
Column2 = sample(50:100, 10),  # Random data
Column3 = sample(100:150, 10), # Random data
Column4 = sample(200:300, 10),  # Random data
Column5 = sample(600:300, 10),  # Random data
Column6 = sample(500:300, 10),  # Random data
Column7 = sample(900:300, 10),  # Random data
Column8 = sample(300:300, 10)  # Random data
)
# Create a flextable object with custom styles
flextable_obj <- flextable(my_data) %>%
# Adjust table size and font size
fontsize(size = 14, part = "all") %>%
# Add header background color
bg(part = "header", bg = "#4F81BD") %>%
# Add text color to header
color(part = "header", color = "white") %>%
# Center align text in all cells
align(align = "center", part = "all") %>%
# Add borders
border_inner(border = fp_border(color = "black", width = 2)) %>%
border_outer(border = fp_border(color = "black", width = 2)) %>%
# Adjust column widths for a larger table
set_table_properties(width = .8, layout = "autofit")
# Add the table to the slide
pptx <- ph_with(
pptx,
value = flextable_obj,
location = ph_location(left = 1, top = 2, width = 9, height = 3) # Adjusted for a larger table
)
# Save the updated PowerPoint
print(pptx, target = "updated_presentation_with_date.pptx")
#Creating a chart
# Install and load the required packages
#install.packages("rvg")
library(rvg)
library(officer)
# Load your existing PowerPoint presentation
pptx <- read_pptx("updated_presentation_with_date.pptx")
# Go to slide 11
pptx <- on_slide(pptx, index = 11)
# Add a title to the slide
pptx <- ph_with(pptx, "Column Chart Example",
location = ph_location(left = 6, top = 2, width = 9, height = 3))
# Insert the column chart using ph_with_vg()
pptx <- ph_with_vg(
pptx,
code = {
# Example dataset (mtcars dataset)
barplot(
table(mtcars$cyl),  # Create a bar chart of the 'cyl' column (cylinder count)
main = "Count of Cars by Cylinder",
xlab = "Number of Cylinders",
ylab = "Frequency",
# Save the updated PowerPoint
print(pptx, target = "updated_presentation_with_date.pptx")
#Creating a chart
# Install and load the required packages
#install.packages("rvg")
library(rvg)
#Creating a chart
# Install and load the required packages
#install.packages("rvg")
library(rvg)
library(officer)
# Load your existing PowerPoint presentation
pptx <- read_pptx("updated_presentation_with_date.pptx")
# Go to slide 11
pptx <- on_slide(pptx, index = 11)
# Add a title to the slide
pptx <- ph_with(pptx, "Column Chart Example",
location = ph_location(left = 15, top = 2, width = 9, height = 3))
# Insert the column chart using ph_with_vg()
pptx <- ph_with_vg(
pptx,
code = {
# Example dataset (mtcars dataset)
barplot(
table(mtcars$cyl),  # Create a bar chart of the 'cyl' column (cylinder count)
main = "Count of Cars by Cylinder",
xlab = "Number of Cylinders",
ylab = "Frequency",
col = "blue",  # Color for the columns
border = "black",  # Border color for the columns
ylim = c(0, 15)  # Set y-axis limit for better presentation
)
},
location = ph_location(left = 1, top = 1.5, width = 8, height = 4)  # Adjust as necessary
)
#Creating a chart
# Install and load the required packages
#install.packages("rvg")
library(rvg)
library(officer)
# Load your existing PowerPoint presentation
pptx <- read_pptx("updated_presentation_with_date.pptx")
# Go to slide 11
pptx <- on_slide(pptx, index = 11)
# Add a title to the slide
pptx <- ph_with(pptx, "Column Chart Example",
location = ph_location(left = 15, top = 2, width = 9, height = 3))
# Insert the column chart using ph_with_vg()
pptx <- ph_with_vg(
pptx,
code = {
# Example dataset (mtcars dataset)
barplot(
table(mtcars$cyl),  # Create a bar chart of the 'cyl' column (cylinder count)
main = "Count of Cars by Cylinder",
xlab = "Number of Cylinders",
ylab = "Frequency",
col = "blue",  # Color for the columns
border = "black",  # Border color for the columns
ylim = c(0, 15)  # Set y-axis limit for better presentation
)
},
location = ph_location(left = 1, top = 1.5, width = 8, height = 4)  # Adjust as necessary
)
install.packages("rvg")
install.packages("rvg")
install.packages("rvg")
install.packages("rvg")
library(officer)
